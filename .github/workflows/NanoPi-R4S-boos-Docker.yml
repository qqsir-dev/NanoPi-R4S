name: NanoPi-R4S-boos-Docker

on:
  repository_dispatch:
  workflow_dispatch:
  # schedule:
    # - cron: 0 17 * * *
  # watch:
  #   types: started

env:
  REPO_URL: https://github.com/Boos4721/openwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/boos/boos-docker.config
  DIY_SH: scripts/boos.sh
  KMODS_IN_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: self-hosted
    if: github.repository == 'DHDAXCW/NanoPi-R4S'
    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      FIRMWARE: ${{ steps.compile.outputs.FIRMWARE }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        uname -a
        [ -f /proc/version ] && cat /proc/version
        [ -f /etc/issue.net ] && cat /etc/issue.net
        [ -f /etc/issue ] && cat /etc/issue
        ulimit -a
    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
    - name: Update Feeds
      id: update
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
        mkdir customfeeds
        git clone --depth=1 https://github.com/Boos4721/packages customfeeds/packages
        git clone --depth=1 https://github.com/Boos4721/luci customfeeds/luci
        chmod +x ../scripts/*.sh
        ../scripts/hook-feeds.sh
    
    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a -f
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        ../scripts/preset-clash-core.sh armv8
        ../scripts/preset-terminal-tools.sh
        make defconfig
    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        ../scripts/modify_config.sh
        cat .config
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
  
    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j72
        make toolchain/compile -j$(nproc) || make toolchain/compile -j72
        make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "::set-output name=TARGET::$(echo $TARGET)"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=FIRMWARE::$(echo $PWD)"
        echo "::set-output name=COMPILE_STATUS::success"
    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        mkdir -p files/etc/uci-defaults/
        cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        rm -rf bin/targets/rockchip/armv8/openwrt-rockchip-armv8-embedfire_doornet2.manifest
        rm -rf bin/targets/rockchip/armv8/openwrt-rockchip-armv8-embedfire_doornet2-rootfs.tar.gz
        rm -rf bin/targets/rockchip/armv8/config.buildinfo
        rm -rf bin/targets/rockchip/armv8/packages-server.zip
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d")-Lean1"
          echo "::set-output name=release_date::$(date +"%Y.%m.%d")"
          touch release.txt
          echo "后台地址：192.168.11.1" >> release.txt
          echo "::set-output name=status::success"
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          name: ${{ steps.tag.outputs.release_date }} NanoPi-R4S-linux-5.10_全插件_docker_超频
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
          retain_days: 1
          keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
          keep_latest: 20
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
          name: |
            bin-archive
